<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ExoLand - Solar System Visualization</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Oxanium:wght@400;600&display=swap">
    <style>
        /* General styling */
        body {
            font-family: 'Oxanium', sans-serif;
            margin: 0;
            overflow: hidden;
            color: #545454;
            background-color: #ffffff;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        header {
            width: 100%;
            padding: 1rem;
            background-color: #545454;
            color: #fff;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 10;
        }

        .logo img {
            height: 60px;
        }

        .menu {
            position: relative;
        }

        .menu-btn {
            background: none;
            border: none;
            color: #fff;
            font-size: 1rem;
            cursor: pointer;
        }

        .dropdown {
            display: none;
            position: absolute;
            top: 100%;
            right: 0;
            background-color: #545454;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            padding: 0.5rem;
        }

        .dropdown a {
            display: block;
            color: #59b280;
            padding: 0.5rem 1rem;
            text-decoration: none;
            font-size: 1rem;
        }

        .dropdown a:hover {
            background-color: #333;
            color: #fff;
        }

        .content {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            color: #545454;
            position: relative;
            z-index: 10;
        }

        .content h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .content p {
            font-size: 1.2rem;
            margin-bottom: 2rem;
            max-width: 600px;
        }

        .content .main-button {
            background-color: #59b280;
            color: #fff;
            padding: 1rem 2rem;
            font-size: 1.5rem;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .content .main-button:hover {
            background-color: #458b63;
        }

        footer {
            padding: 1rem;
            color: #545454;
            z-index: 10;
            background-color: #fff;
            width: 100%;
            text-align: center;
        }

        footer a {
            color: #59b280;
            text-decoration: none;
        }

        footer a:hover {
            text-decoration: underline;
        }

        /* Canvas styling */
        canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 0;
        }
    </style>
</head>
<body>
<header>
    <div class="logo">
        <img src="/src/website/image-removebg-preview%20(3).png" alt="ExoLand Logo">
    </div>
    <div class="menu">
        <button class="menu-btn" onclick="toggleDropdown()">Menu</button>
        <div class="dropdown" id="dropdown">
            <a href="index.html">Home</a>
            <a href="model.html">Model</a>
            <a href="loan.html">Loan</a>
        </div>
    </div>
</header>

<main class="content">
    <h1>Welcome to ExoLand</h1>
    <p>Your journey to discovering the universe begins here. Explore our models and immerse yourself in the possibilities beyond Earth.</p>
    <a href="model.html" class="main-button">Explore the Model</a>
</main>

<canvas id="three-canvas"></canvas>

<footer>
    Â© 2024 ExoLand, Inc. | <a href="#terms">Terms</a> | <a href="#privacy">Privacy</a> | <a href="#support">Support</a>
</footer>

<script>
    function toggleDropdown() {
        const dropdown = document.getElementById('dropdown');
        dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
    }

    document.addEventListener('click', function(event) {
        const dropdown = document.getElementById('dropdown');
        const menuButton = document.querySelector('.menu-btn');
        if (!menuButton.contains(event.target) && !dropdown.contains(event.target)) {
            dropdown.style.display = 'none';
        }
    });
</script>

<script type="module">
    import * as THREE from 'three';
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
    import TWEEN from '@tweenjs/tween.js';

    const scene = new THREE.Scene();
    const initialFOV = 30;
    const camera = new THREE.PerspectiveCamera(initialFOV, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.fov = initialFOV;
    camera.updateProjectionMatrix();

    const renderer = new THREE.WebGLRenderer({ antialias: true, canvas: document.querySelector("#three-canvas") });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio);

    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;
    controls.enableZoom = true;
    controls.minDistance = 5;
    controls.maxDistance = 100;

    let isPaused = false;
    controls.addEventListener('start', () => { isPaused = true; });
    controls.addEventListener('end', () => { isPaused = false; });

    const sunGeometry = new THREE.SphereGeometry(2, 32, 32);
    const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00 });
    const sun = new THREE.Mesh(sunGeometry, sunMaterial);
    scene.add(sun);

    const planets = [
        { radius: 0.3, distance: 4, color: 0xaaaaaa, speed: 0.001, moons: 1, page: "planet1.html" },
        { radius: 0.3, distance: 5, color: 0xffcc99, speed: 0.0012, moons: 1, page: "planet2.html" },
        { radius: 0.4, distance: 6, color: 0x3399ff, speed: 0.0015, moons: 2, page: "planet3.html" },
        { radius: 0.3, distance: 7.5, color: 0xff5733, speed: 0.0011, moons: 1, page: "planet4.html" },
        { radius: 0.7, distance: 9, color: 0xd2691e, speed: 0.0009, moons: 1, page: "planet5.html" },
        { radius: 0.6, distance: 10.5, color: 0xffcc33, speed: 0.0013, moons: 2, page: "planet6.html" },
        { radius: 0.6, distance: 12, color: 0x66b3ff, speed: 0.0014, moons: 1, page: "planet7.html" },
        { radius: 0.5, distance: 13.5, color: 0x0000ff, speed: 0.001, moons: 1, page: "planet8.html" }
    ];

    const planetMeshes = planets.map((planet) => {
        planet.angle = Math.random() * Math.PI * 2;
        const geometry = new THREE.SphereGeometry(planet.radius, 32, 32);
        const material = new THREE.MeshBasicMaterial({ color: planet.color });
        const mesh = new THREE.Mesh(geometry, material);
        mesh.position.set(
            planet.distance * Math.cos(planet.angle),
            0,
            planet.distance * Math.sin(planet.angle)
        );
        scene.add(mesh);

        const moons = [];
        const moonBaseSpeed = 0.005;
        for (let i = 0; i < planet.moons; i++) {
            const moonGeometry = new THREE.SphereGeometry(0.1, 16, 16);
            const moonMaterial = new THREE.MeshBasicMaterial({ color: 0x888888 });
            const moon = new THREE.Mesh(moonGeometry, moonMaterial);
            moon.position.set(planet.radius + 0.5 + i * 0.2, 0, 0);
            mesh.add(moon);
            moons.push({ mesh: moon, distance: planet.radius + 0.5 + i * 0.3, angle: i * Math.PI / 2, speed: moonBaseSpeed + i * 0.002 });
        }

        return { mesh, ...planet, moons };
    });

    camera.position.set(0, 20, 40);
    camera.lookAt(scene.position);

    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();

    window.addEventListener('click', (event) => {
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

        raycaster.setFromCamera(mouse, camera);
        const intersects = raycaster.intersectObjects(planetMeshes.map(p => p.mesh));

        if (intersects.length > 0) {
            const clickedPlanet = planetMeshes.find(p => p.mesh === intersects[0].object);
            if (clickedPlanet) {
                window.open(clickedPlanet.page, '_blank');
            }
        }
    });

    function animate() {
        if (!isPaused) {
            planetMeshes.forEach((planet) => {
                planet.angle += planet.speed;
                planet.mesh.position.x = planet.distance * Math.cos(planet.angle);
                planet.mesh.position.z = planet.distance * Math.sin(planet.angle);

                planet.moons.forEach((moon) => {
                    moon.angle += moon.speed;
                    moon.mesh.position.x = moon.distance * Math.cos(moon.angle);
                    moon.mesh.position.z = moon.distance * Math.sin(moon.angle);
                });
            });
        }

        controls.update();
        TWEEN.update();
        renderer.render(scene, camera);
        requestAnimationFrame(animate);
    }

    animate();
</script>

</body>
</html>
